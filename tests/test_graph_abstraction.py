import pytest
import numpy as np
from scipy.sparse import coo_matrix
from libmg import Graph

from forward_abstract_interpretation.graph_abstraction import edge_abstraction, lumpability, bisim_abstraction

x = np.array([[0.5, 0.7, 1], [-0.5, 1, 0.5], [3.1, 2.3, 4], [1.1, 1.3, 1.4], [0.1, 0, 0.2]], dtype=np.float32)

a = coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ([0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4],
                                                            [0, 1, 2, 1, 2, 1, 2, 3, 3, 4, 1, 4])),
               shape=(5, 5), dtype=np.float32)
e =  np.array([[0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.40824828], [0.3333333], [0.3333333],
               [0.40824828], [0.49999997], [0.49999997], [0.40824828], [0.49999997]], np.float32)

y = np.array([[0], [1], [1], [0], [0]], dtype=np.uint8)

g = Graph(x, a, e, y)


x1 = np.array([[0.3, 0.1, -1], [0, 0.5, 0.3], [-2.1, 1.1, -4]], dtype=np.float32)

a1 = coo_matrix(([1, 1, 1, 1, 1, 1, 1], ([0, 0, 0, 1, 1, 2, 2],
                                              [0, 1, 2, 1, 2, 1, 2])),
               shape=(3, 3), dtype=np.float32)
e1 =  np.array([[0.2], [0.5], [0.9], [0.3], [0.4], [0.7], [0.]], np.float32)

y1 = np.array([[0], [1], [1]], dtype=np.uint8)

g1 = Graph(x1, a1, e1, y1)


x2 = np.array([[0.5, 0.7, 0], [-0.5, 1, 0], [3.1, 2.3, 0], [1.1, 1.3, 0], [0.1, 0, 0]], dtype=np.float32)

a2 = coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ([0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4],
                                                            [0, 1, 1, 3, 0, 2, 3, 3, 4, 1, 4])),
               shape=(5, 5), dtype=np.float32)
e2 =  np.array([[0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.40824828], [0.3333333],
                [0.3333333], [0.40824828], [0.49999997], [0.49999997], [0.40824828], [0.49999997]],
               np.float32)

y2 = np.array([[0], [1], [1], [0], [0]], dtype=np.uint8)

g2 = Graph(x2, a2, e2, y2)

P = np.array([
    [1 / 3, 1 / 3, 1 / 3, 0, 0],
    [0, 1 / 3, 1 / 3, 0.40824828, 0],
    [0, 1 / 3, 1 / 3, 0.40824828, 0],
    [0, 0, 0, 1 / 2, 1 / 2],
    [0, 0.40824828, 0, 0, 1 / 2]
])

x3 = np.array([[0.5, 0.7, 0], [-0.5, 1, 0], [0.5, -1, 2], [1.1, 1.3, 0], [0.1, 0, 0]], dtype=np.float32)

a3 = coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4],
                                                             [0, 1, 2, 1, 2, 3, 1, 2, 3, 3, 4, 1, 4])),
               shape=(5, 5), dtype=np.float32)
e3 =  np.array([[0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.40824828],
                [0.3333333], [0.3333333], [0.40824828], [0.49999997], [0.49999997], [0.40824828], [0.49999997]],
               np.float32)

y3 = np.array([[0], [1], [1], [0], [0]], dtype=np.uint8)

g3 = Graph(x3, a3, e3, y3)


x4 = np.array([[0.5, 0.7, 1], [-0.5, 1, 0.5], [3.1, 2.3, 4], [1.1, 1.3, 1.4], [0.1, 0, 0.2]], dtype=np.float32)

a4 = coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ([0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4],
                                                             [0, 1, 2, 1, 2, 1, 2, 3, 3, 4, 1, 4])),
               shape=(5, 5), dtype=np.float32)
e4 =  np.array([[0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.3333333],
                [0.4], [0.5], [0.5], [0.4], [0.5]],
               np.float32)

y4 = np.array([[0], [1], [1], [0], [0]], dtype=np.uint8)

g4 = Graph(x4, a4, e4, y4)


x5 = np.array([[-0.5, 1, 0], [-0.5, 1, 0], [-0.5, 1, 2], [1.1, 1.3, 1.4], [0.1, 0, 0.2]], dtype=np.float32)

a5 = coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ([0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4],
                                                             [0, 1, 2, 1, 2, 1, 2, 3, 3, 4, 1, 4])),
               shape=(5, 5), dtype=np.float32)
e5 =  np.array([[0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.3333333], [0.3333333],
                [0.4], [0.5], [0.5], [0.4], [0.5]],
               np.float32)

y5 = np.array([[0], [1], [1], [0], [0]], dtype=np.uint8)

g5 = Graph(x5, a5, e5, y5)


@pytest.mark.parametrize('certain_edges, expected_graph, missing, generator',
                         [({(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (2, 2), (2, 3), (3, 3), (3, 4), (4, 1), (4, 4)},
                           (x, a, (np.array([[0.3333333 ], [0.40824828], [0.3333333 ], [0.49999997], [0.40824828], [0.40824828], [0.3333333 ], [0.40824828], [0.49999997], [0.49999997], [0.49999997], [0.49999997]], np.float32), np.array([[0.3333333 ], [0.40824828], [0.3333333 ], [0.49999997], [0.40824828], [0.40824828], [0.3333333 ], [0.40824828], [0.49999997], [0.49999997], [0.49999997], [0.49999997]], np.float32)), y),
                           False, 'GCN'),
                          ({(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)},
                           (x, coo_matrix(([1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1], ([0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4],
                                                    [0, 1, 2, 1, 2, 1, 2, 3, 3, 4, 1, 4])),  shape=(5, 5), dtype=np.float32),
                                (np.array([[0.3333333 ], [0.40824828], [0.3333333 ], [0.49999997], [0.40824828], [0.40824828], [0.3333333 ], [0.40824828], [0.49999997], [0.49999997], [0.49999997], [0.49999997]], np.float32), np.array([[1.        ], [0.70710677], [0.70710677], [1.        ], [0.70710677], [0.70710677], [1.        ], [0.70710677], [1.        ], [0.70710677], [0.70710677], [1.        ]], np.float32)), y),
                           False, 'GCN'),
                          ({(0,0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 1), (1, 2)},
                           (x, coo_matrix(  ([1, 1,-1, 1, 1, -1, 1, -1, 1, -1, -1, 1],
                                                 ([0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4],
                                                  [0, 1, 2, 1, 2, 1, 2, 3, 3, 4, 1, 4])),
                                                    shape=(5, 5), dtype=np.float32), (np.array([[0.3333333 ], [0.40824828], [0.3333333 ], [0.49999997], [0.40824828], [0.40824828], [0.3333333 ], [0.40824828], [0.49999997], [0.49999997], [0.49999997], [0.49999997]], np.float32), np.array([[0.5       ], [0.5       ], [0.57735026], [0.5       ], [0.70710677], [0.5       ], [1.        ], [0.70710677], [1.        ], [0.70710677], [0.5       ], [1.        ]], np.float32)), y),
                           False, 'GCN'),
                          ({(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (2, 2), (2, 3), (3, 3), (3, 4), (4, 1), (4, 4)},
                           (x, coo_matrix(  ([ 1,  1,  1, -1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, 1,  1, -1,  1, -1, -1,  1],
                                                           ([i for i in range(5) for _ in range(5)],
                                                            [i % 5 for i in range(25)])),
                                                    shape=(5, 5), dtype=np.float32), (np.array([[0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999], [0.19999999]], dtype=np.float32), np.array([[0.33333334], [0.4082483 ], [0.33333334], [0.35355338], [0.35355338], [0.33333334], [0.5       ], [0.4082483 ], [0.4082483 ], [0.4082483 ], [0.28867513], [0.4082483 ], [0.33333334], [0.4082483 ], [0.35355338], [0.33333334], [0.4082483 ], [0.33333334], [0.5       ], [0.5       ], [0.33333334], [0.5       ], [0.33333334], [0.4082483 ], [0.5       ]], dtype=np.float32)), y),
                           True, 'GCN'),
                          ({(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)},
                           (x, coo_matrix(  ([ 1,  -1,  -1, -1, -1, -1,  1,  -1, -1, -1, -1,  -1,  1,  -1, -1, -1, -1, -1, 1,  -1, -1,  -1, -1, -1, 1],
                                                           ([i for i in range(5) for _ in range(5)],
                                                            [i % 5 for i in range(25)])),
                                                    shape=(5, 5), dtype=np.float32), (np.full((25, 1), 1/5), np.array([[1.        ], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [1.        ], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [1.        ], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [1.        ], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [0.70710677], [1.        ]], dtype=np.float32)), y),
                           True, 'GCN'),
                          ({(0, 1), (1, 2), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4)},
                           (x, coo_matrix(  ([ 1,  1,  -1, -1, -1, -1,  1,  1, -1, -1, -1,  -1,  1,  -1, -1, -1, -1, -1, 1, - 1, -1,  -1, -1, -1,  1],
                                                           ([i for i in range(5) for _ in range(5)],
                                                            [i % 5 for i in range(25)])),
                                                    shape=(5, 5), dtype=np.float32), (np.full((25, 1), 1/5), np.array([[0.5       ], [0.5       ], [0.57735026], [0.57735026], [0.57735026], [0.4082483 ], [0.5       ], [0.70710677], [0.57735026], [0.57735026], [0.5       ], [0.5       ], [1.        ], [0.70710677], [0.70710677], [0.5       ], [0.5       ], [0.70710677], [1.        ], [0.70710677], [0.5       ], [0.5       ], [0.70710677], [0.70710677], [1.        ]], dtype=np.float32)), y),
                           True, 'GCN'),
                          ({(0, 1), (1, 2), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4)},
                           (x, coo_matrix(([1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, - 1, -1, -1, -1, -1, 1],
                                           ([i for i in range(5) for _ in range(5)],
                                            [i % 5 for i in range(25)])),
                                          shape=(5, 5), dtype=np.float32), (np.array([[0.3333333 ], [0.3333333 ], [0.3333333 ], [5.        ], [5.        ], [5.        ], [0.3333333 ], [0.40824828], [5.        ], [5.        ], [5.        ], [0.3333333 ], [0.3333333 ], [0.40824828], [5.        ], [5.        ], [5.        ], [5.        ], [0.49999997], [0.49999997], [5.        ], [0.40824828], [5.        ], [5.        ], [0.49999997]], dtype=np.float32), np.array(
                               [[ 0.3333333 ], [ 0.3333333 ], [ 0.3333333 ], [10.        ], [10.        ], [10.        ], [ 0.3333333 ], [ 0.40824828], [10.        ], [10.        ], [10.        ], [ 0.3333333 ], [ 0.3333333 ], [ 0.40824828], [10.        ], [10.        ], [10.        ], [10.        ], [ 0.49999997], [ 0.49999997], [10.        ], [ 0.40824828], [10.        ], [10.        ], [ 0.49999997]],
                               dtype=np.float32)), y),
                           True, (5., 10.))
                          ])
def test_edge_abstraction(certain_edges, expected_graph, missing, generator):
    (x, a, (e_lb, e_ub)), y = edge_abstraction(g, certain_edges, missing, generator)
    ex_x, ex_a, (ex_e_lb, ex_e_ub), ex_y = expected_graph
    np.testing.assert_array_equal(x, ex_x)
    assert (a!=ex_a).nnz == 0
    np.testing.assert_array_almost_equal(e_lb, ex_e_lb)
    np.testing.assert_array_almost_equal(e_ub, ex_e_ub)
    np.testing.assert_array_equal(y, ex_y)


def test_lumpability():
    assert lumpability(g3, 'fw') == [[0], [1, 2], [3], [4]]

def test_bisim_abstraction():
    print(bisim_abstraction(g3, 'fw'))

# @pytest.mark.parametrize('graph, mode, expected_graph',[(g3, 'nodes', ((np.array([[0.5, 0.7, 0], [-0.5, 1, 0], [0.1, 0, 0], [1.1, 1.3, 0]], dtype=np.float32),
#                                                                         np.array([[0.5, 0.7, 0], [-0.5, 1, 0], [0.1, 0, 0], [1.1, 1.3, 0]], dtype=np.float32)),
#                                                                        coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1],
#                                                                                    ([0, 0, 1, 1, 2, 2, 3, 3],
#                                                                                     [0, 1, 1, 3, 1, 2, 2, 3])),
#                                                                                   shape=(4, 4), dtype=np.float32),
#                                                                        (np.array([[0.33333331],[0.33333331],[0.33333331],[0.33333331],[0.40824828],[0.49999997], [0.49999997], [0.49999997]], np.float32),
#                                                                         np.array([[0.33333331], [0.33333331], [0.33333331],[0.40824828], [0.40824828], [0.49999997], [0.49999997], [0.49999997]], np.float32)))),
#                                                         (g4, 'edges', ((np.array([[1.1, 1.3, 1.4], [0.1, 0, 0.2], [-0.5, 0.7, 0.5], [3.1, 2.3, 4]], dtype=np.float32),
#                                                                         np.array([[1.1, 1.3, 1.4], [0.1, 0, 0.2],  [0.5, 1, 1], [3.1, 2.3, 4]], dtype=np.float32)),
#                                                                        coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1],
#                                                                                    ([0, 0, 1, 1, 2, 2, 3, 3, 3],
#                                                                                     [0, 1, 1, 2, 2, 3, 0, 2, 3])),
#                                                                                   shape=(4, 4), dtype=np.float32),
#                                                                        (np.array([[0.5],[0.5],[0.5],[0.4],[0.3333333],[0.3333333], [0.4], [0.3333333], [0.3333333]], np.float32),
#                                                                         np.array([[0.5],[0.5],[0.5],[0.4],[0.3333333],[0.3333333], [0.4], [0.3333333], [0.3333333]], np.float32)))),
#                                                         (g5, 'both', ((np.array([[1.1, 1.3, 1.4], [-0.5, 1, 0], [-0.5, 1, 2], [0.1, 0, 0.2]], dtype=np.float32),
#                                                                         np.array([[1.1, 1.3, 1.4], [-0.5, 1, 0],  [-0.5, 1, 2], [0.1, 0, 0.2]], dtype=np.float32)),
#                                                                        coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1],
#                                                                                    ([0, 0, 1, 1, 2, 2, 2, 3, 3],
#                                                                                     [0, 3, 1, 2, 0, 1, 2, 1, 3])),
#                                                                                   shape=(4, 4), dtype=np.float32),
#                                                                        (np.array([[0.5],[0.5],[0.3333333],[0.3333333],[0.4],[0.3333333], [0.3333333], [0.4], [0.5]], np.float32),
#                                                                         np.array([[0.5],[0.5],[0.3333333],[0.3333333],[0.4],[0.3333333], [0.3333333], [0.4], [0.5]], np.float32))))
#                                                         ])
# def test_bisim_abstraction(graph, mode, expected_graph):
#     (x_lb, x_ub), adj, (e_lb, e_ub) = bisim_abstraction(graph, 0.0001, mode)
#     (expected_x_lb, expected_x_ub), expected_adj, (expected_e_lb, expected_e_ub) = expected_graph
#
#     np.testing.assert_array_almost_equal(x_lb, expected_x_lb)
#     np.testing.assert_array_almost_equal(x_ub, expected_x_ub)
#     assert (adj!=expected_adj).nnz == 0
#     np.testing.assert_array_almost_equal(e_lb, expected_e_lb)
#     np.testing.assert_array_almost_equal(e_ub, expected_e_ub)


# def test_merge_abstraction():
#     (x_lb, x_ub), adj, (e_lb, e_ub)  = merge_abstraction([g, g1, g2])
#     expected_x_lb = np.array([[0.3, 0.1, -1], [-0.5, 0.5, 0], [-2.1, 1.1, -4], [1.1, 1.3, 0], [0.1, 0, 0]], dtype=np.float32)
#     expected_x_ub = np.array([[0.5, 0.7, 1], [0, 1, 0.5], [3.1, 2.3, 4], [1.1, 1.3, 1.4], [0.1, 0, 0.2]], dtype=np.float32)
#     expected_e_lb = np.array([[1, 0.2], [1, 0.3333333], [0, 0.3333333], [1, 0.3], [0, 0.4], [0, 0.3333333],
#                               [0., 0.40824828], [0, 0.3333333], [1, 0], [0, 0.3333333], [0, 0.40824828], [0,0.5],
#                               [0, 0.40824828], [0, 0.40824828]], np.float32)
#     expected_e_ub = np.array([[1, 0.3333333], [1, 0.5], [0, 0.9], [1, 0.3333333], [0, 0.40824828], [0, 0.3333333],
#                               [0., 0.40824828], [0, 0.7], [1, 0.3333333], [0, 0.40824828], [0, 0.5], [0,0.5],
#                               [0, 0.5], [0, 0.5]], np.float32)
#     expected_adj = coo_matrix(([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#                                ([0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4],
#                                 [0, 1, 2, 1, 2, 3, 0, 1, 2, 3, 3, 4, 1, 4])), shape=(5, 5), dtype=np.float32)
#
#     np.testing.assert_array_almost_equal(x_lb, expected_x_lb)
#     np.testing.assert_array_almost_equal(x_ub, expected_x_ub)
#     assert (adj!=expected_adj).nnz == 0
#     np.testing.assert_array_almost_equal(e_lb, expected_e_lb)
#     np.testing.assert_array_almost_equal(e_ub, expected_e_ub)